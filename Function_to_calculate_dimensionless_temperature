import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import fsolve

# --- Parâmetros físicos ---
alpha = 3.2e-5     # difusividade térmica [m^2/s] - k/p.cp = 0.03/0.946.1005 considerando o ar seco a 373 K
r0 = 0.003        # raio da esfera [m]
T_inf = 373      # temperatura do fluido [K]
T_i = 303        # temperatura inicial da esfera [K]
Bi = 1000         # número de Biot
N_terms = 5      # número de termos na série

# --- Equação transcendental: 1 - zeta * cot(zeta) = Bi ---
def transcendental_eq(zeta, Bi):
    return 1 - zeta / np.tan(zeta) - Bi

# Estimar as raízes zeta_n
zeta_guesses = np.arange(1, N_terms + 1) * np.pi
zeta_n = np.array([fsolve(transcendental_eq, guess, args=(Bi))[0] for guess in zeta_guesses])

# --- Coeficientes C_n ---
def compute_Cn(zeta):
    num = 4 * (np.sin(zeta) - zeta * np.cos(zeta))
    den = 2 * zeta - np.sin(2 * zeta)
    return num / den

C_n = compute_Cn(zeta_n)

# --- Solução θ*(r*, Fo) ---
def theta_star(r_star, Fo):
    sum_terms = np.zeros_like(r_star)
    for n in range(N_terms):
        term = (C_n[n] *
                np.exp(-zeta_n[n]**2 * Fo) *
                np.sin(zeta_n[n] * r_star) /
                (zeta_n[n] * r_star))
        sum_terms += term
    return sum_terms

# --- Domínio espacial e tempos adimensionais ---
r_star_vals = np.linspace(0.01, 1, 100)  # evitar divisão por zero no centro
Fo_vals = [0.005, 0.01, 0.05, 0.1, 1.0]          # tempos adimensionais

# --- Plotagem ---
plt.figure(figsize=(10, 6))
for Fo in Fo_vals:
    theta_vals = theta_star(r_star_vals, Fo)
    T_vals = theta_vals * (T_i - T_inf) + T_inf
    plt.plot(r_star_vals, T_vals, label=f'Fo = {Fo:.3f}')

plt.title('Distribuição de Temperatura na Esfera (Vários Tempos)')
plt.xlabel('r* (posição radial adimensional)')
plt.ylabel('Temperatura [K]')
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.show()
